@using CreatureCreator.Core.Enums
@using CreatureCreator.Infrastructure.DtoModels
@using CreatureCreator.Infrastructure.Extensions
@inherits MudComponentBase

<MudGrid>
    <MudItem xs="3" Class="@mudItemClass">
        <MudNumericField @bind-Value="Creature.Faction" Label="Faction" Variant="Variant.Outlined" HideSpinButtons="true" Class="@mudElementClass" />
        <MudNumericField @bind-Value="Creature.Level" Label="Level" HideSpinButtons="true" Variant="Variant.Outlined" Class="@mudElementClass" />
        <MudSelect T="Ranks" @bind-Value="Creature.Rank" Label="Rank" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Class="@mudElementClass">
            <MudSelectItem Value="@(Ranks.LESSER)">Lesser</MudSelectItem>
            <MudSelectItem Value="@(Ranks.NORMAL)">Normal</MudSelectItem>
            <MudSelectItem Value="@(Ranks.RARE)">Rare</MudSelectItem>
            <MudSelectItem Value="@(Ranks.ELITE)">Elite</MudSelectItem>
            <MudSelectItem Value="@(Ranks.RARE_ELITE)">Rare Elite</MudSelectItem>
            <MudSelectItem Value="@(Ranks.BOSS)">Boss</MudSelectItem>
        </MudSelect>
        <MudSelect T="CreatureTypes" @bind-Value="Creature.CreatureType" Label="Type" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Class="@mudElementClass">
            <MudSelectItem Value="@(CreatureTypes.NONE)">None</MudSelectItem>
            <MudSelectItem Value="@(CreatureTypes.HUMANOID)">Humanoid</MudSelectItem>
            <MudSelectItem Value="@(CreatureTypes.DEMON)">Demon</MudSelectItem>
            <MudSelectItem Value="@(CreatureTypes.DRAGONKIN)">Dragonkin</MudSelectItem>
            <MudSelectItem Value="@(CreatureTypes.UNDEAD)">Undead</MudSelectItem>
            <MudSelectItem Value="@(CreatureTypes.GIANT)">Giant</MudSelectItem>
            <MudSelectItem Value="@(CreatureTypes.BEAST)">Beast</MudSelectItem>
            <MudSelectItem Value="@(CreatureTypes.ELEMENTAL)">Elemental</MudSelectItem>
        </MudSelect>
        <MudSelect T="CreatureUnitClasses" @bind-Value="Creature.CreatureUnitClass" Label="Power Resource" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Class="@mudElementClass">
            <MudSelectItem Value="@(CreatureUnitClasses.WARRIOR)">Rage</MudSelectItem>
            <MudSelectItem Value="@(CreatureUnitClasses.ROGUE)">Energy</MudSelectItem>
            <MudSelectItem Value="@(CreatureUnitClasses.PALADIN)">Mana Melee</MudSelectItem>
            <MudSelectItem Value="@(CreatureUnitClasses.MAGE)">Mana Caster</MudSelectItem>
        </MudSelect>
        <MudNumericField @bind-Value="Creature.Scale" Label="Scale" HideSpinButtons="true" Class="@mudElementClass" Variant="Variant.Outlined" />

    </MudItem>

    <MudItem xs="6" Style="@($"background-image:url('images/models/{Creature.Gender.ToString().ToLower()}/{Creature.Race.ToString().Replace("_", "").ToLower()}.png'); background-repeat:no-repeat; background-position: center; background-size:contain;")" Class="@mudItemClass">
    </MudItem>

    <MudItem xs="3" Class="@mudItemClass">
        <MudSelect T="string" MultiSelectionTextFunc="@(new Func<List<string>, string>(SetUnitFlags))" @bind-Value="_unitFlags" @bind-SelectedValues="_unitFlagsSelection" Label="Unit Flags" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" MultiSelection="true" Class="@mudElementClass">
            @foreach (UnitFlags flag in Enum.GetValues<UnitFlags>())
            {
                <MudSelectItem Value="@(flag.ToString())">@flag</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" MultiSelectionTextFunc="@(new Func<List<string>, string>(SetUnitFlags2))" @bind-Value="_unitFlags2" @bind-SelectedValues="_unitFlags2Selection" Label="Unit Flags 2" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" MultiSelection="true" Class="@mudElementClass">
            @foreach (UnitFlags2 flag in Enum.GetValues<UnitFlags2>())
            {
                <MudSelectItem Value="@(flag.ToString())">@flag</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" MultiSelectionTextFunc="@(new Func<List<string>, string>(SetUnitFlags3))" @bind-Value="_unitFlags3" @bind-SelectedValues="_unitFlags3Selection" Label="Unit Flags 3" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" MultiSelection="true" Class="@mudElementClass">
            @foreach (UnitFlags3 flag in Enum.GetValues<UnitFlags3>())
            {
                <MudSelectItem Value="@(flag.ToString())">@flag</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" MultiSelectionTextFunc="@(new Func<List<string>, string>(SetFlagsExtra))" @bind-Value="_flagsExtra" @bind-SelectedValues="_flagsExtraSelection" Label="Flags Extra" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" MultiSelection="true" Class="@mudElementClass">
            @foreach (FlagsExtra flag in Enum.GetValues<FlagsExtra>())
            {
                <MudSelectItem Value="@(flag.ToString())">@flag</MudSelectItem>
            }
        </MudSelect>
        <MudNumericField @bind-Value="Creature.HealthModifier" Label="Health Modifier" Variant="Variant.Outlined" HideSpinButtons="true" Class="@mudElementClass" />
        <MudNumericField @bind-Value="Creature.DamageModifier" Label="Damage Modifier" Variant="Variant.Outlined" HideSpinButtons="true" Class="@mudElementClass" />

    </MudItem>



    <MudItem xs="3" Class="@mudItemClass">
        <MudNumericField @bind-Value="Creature.SoundId" Label="Sound" Variant="Variant.Outlined" HideSpinButtons="true" Class="@mudElementClass" />

    </MudItem>
    <MudItem xs="6" Class="@mudItemClass">
        <MudTextField @bind-Value="Creature.Name" Label="Name" Class="@mudElementClass" />
    </MudItem>
    <MudItem xs="3" Class="@mudItemClass">
        <MudNumericField @bind-Value="Creature.ArmorModifier" Label="Armor Modifier" Variant="Variant.Outlined" HideSpinButtons="true" Class="@mudElementClass" />
    </MudItem>

    <MudItem xs="3" Class="@mudItemClass">
        <MudSelect T="bool" @bind-Value="Creature.RegenHealth" Label="Regenerate Health" Variant="Variant.Outlined" Class="@mudElementClass">
            <MudSelectItem Value="true">On</MudSelectItem>
            <MudSelectItem Value="false">Off</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs="1" Class="@mudItemClass"/>
    <MudItem xs="4" Class="@mudItemClass">
        <MudTextField @bind-Value="Creature.SubName" Label="Sub Name" Class="@mudElementClass" />
    </MudItem>
    <MudItem xs="1" Class="@mudItemClass"/>
    <MudItem xs="3" Class="@mudItemClass">
        <ListWithAdd Numbers="Creature.Auras" ParameterClass="@mudElementClass" Style="width:100%"/>
    </MudItem>


</MudGrid>
@code {
    [Parameter]
    public CreatureDto Creature { get; set; }

    [Parameter]
    public CreatureDto? CreatureLookup { get; set; }

    protected override void OnInitialized()
    {
        _flagsExtra = ((long)Creature.FlagsExtra).ToString();
        _unitFlags = ((long)Creature.UnitFlags).ToString();
        _unitFlags2 = ((long)Creature.UnitFlags2).ToString();
        _unitFlags3 = ((long)Creature.UnitFlags3).ToString();

        _unitFlagsSelection = Creature.UnitFlags.ToValues().Select(v => v.ToString());
        _unitFlags2Selection = Creature.UnitFlags2.ToValues().Select(v => v.ToString());
        _unitFlags3Selection = Creature.UnitFlags3.ToValues().Select(v => v.ToString());
        _flagsExtraSelection = Creature.FlagsExtra.ToValues().Select(v => v.ToString());
        base.OnInitialized();
    }

    string _flagsExtra = "0";
    string _unitFlags = "0";
    string _unitFlags2 = "0";
    string _unitFlags3 = "0";
    IEnumerable<string> _flagsExtraSelection = new List<string>();
    IEnumerable<string> _unitFlagsSelection = new List<string>();
    IEnumerable<string> _unitFlags2Selection = new List<string>();
    IEnumerable<string> _unitFlags3Selection = new List<string>();

    string SetFlagsExtra(IEnumerable<string> selection)
    {
        var flags = string.Join(",", selection);
        if (selection.Count() > 0)
            Creature.FlagsExtra = (FlagsExtra)Enum.Parse<FlagsExtra>(flags);

        return ((long)Creature.FlagsExtra).ToString();
    }
    string SetUnitFlags(IEnumerable<string> selection)
    {
        var flags = string.Join(",", selection);
        if (selection.Count() > 0)
            Creature.UnitFlags = (UnitFlags)Enum.Parse<UnitFlags>(flags);

        return ((long)Creature.UnitFlags).ToString();
    }
    string SetUnitFlags2(IEnumerable<string> selection)
    {
        var flags = string.Join(",", selection);
        if (selection.Count() > 0)
            Creature.UnitFlags2 = (UnitFlags2)Enum.Parse<UnitFlags2>(flags);

        return ((long)Creature.UnitFlags2).ToString();
    }
    string SetUnitFlags3(IEnumerable<string> selection)
    {
        var flags = string.Join(",", selection);
        if (selection.Count() > 0)
            Creature.UnitFlags3 = (UnitFlags3)Enum.Parse<UnitFlags3>(flags);

        return ((long)Creature.UnitFlags3).ToString();
    }



    string mudElementClass = "pb-2 pt-2";
    string mudItemClass = "pb-0 pt-0";

}
