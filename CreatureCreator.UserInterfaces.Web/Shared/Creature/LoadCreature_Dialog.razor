@using CreatureCreator.Core.Enums;
@using CreatureCreator.Infrastructure.DtoModels
@using CreatureCreator.Infrastructure.Services

@inject CreatureCreatorService Service
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Style="width: 400px;">
            <LoaderProgress @ref="loaderProgressRef">
                <MudTextField DebounceInterval="1000" OnDebounceIntervalElapsed="CharacterNameDebounce" @bind-Value="CharacterName" @ref="characterNameRef" Label="Character Name" Variant="Variant.Outlined" FullWidth="true" />
                <MudText Typo="Typo.h4">
                    - or -
                </MudText>
                <MudNumericField DebounceInterval="1000" OnDebounceIntervalElapsed="CreatureIdDebounce" @bind-Value="CreatureId" @ref="creatureIdRef" Label="Creature ID" Variant="Variant.Outlined" FullWidth="true" HideSpinButtons="true" />
                <MudText Typo="Typo.h4">
                    - or -
                </MudText>
                <MudNumericField DebounceInterval="1000" OnDebounceIntervalElapsed="CreatureDisplayIdDebounce" @bind-Value="CreatureDisplayId" @ref="creatureDisplayIdRef" Label="Creature Display ID" Variant="Variant.Outlined" FullWidth="true" HideSpinButtons="true" />
                <MudText Typo="Typo.h4">
                    - or -
                </MudText>
                <MudText Typo="Typo.h6">
                    Start from scratch
                </MudText>
                <MudStack Row="true" Style="height:200">
                    <RaceSelector Gender="Genders.Male" RaceSelectedCallback="SelectNewMale" />
                    <RaceSelector Gender="Genders.Female" RaceSelectedCallback="SelectNewFemale" />
                </MudStack>
                <MudSpacer />
            </LoaderProgress>
        </MudStack>
    </DialogContent>
</MudDialog>


@code {
    [CascadingParameter]
    MudDialogInstance LoadCreatureDialog { get; set; }

    [Parameter]
    public int? CreatureId { get; set; }

    [Parameter]
    public int? CreatureDisplayId { get; set; }

    [Parameter]
    public string CharacterName { get; set; }

    MudTextField<string> characterNameRef;
    MudNumericField<int?> creatureIdRef;
    MudNumericField<int?> creatureDisplayIdRef;
    LoaderProgress loaderProgressRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (CreatureId != null)
            {
                await CreatureIdDebounce(CreatureId.ToString());
            }
            else if (CreatureDisplayId != null)
            {
                await CreatureDisplayIdDebounce(CreatureDisplayId.ToString());
            }
            else if (CharacterName != null)
            {
                await CharacterNameDebounce(CharacterName);
            }
            await base.OnInitializedAsync();
        }
    }

    private async Task SelectNewMale(DisplayRaces race)
    {
        await SelectionNew(race, Genders.Male);
    }

    private async Task SelectNewFemale(DisplayRaces race)
    {
        await SelectionNew(race, Genders.Female);
    }

    private async Task SelectionNew(DisplayRaces race, Genders gender)
    {
        var creature = await Service.GetCreatureByRaceAndGender(race, gender, loaderProgressRef.SetLoading);
        Close(creature);
    }

    private void Close(CreatureDto creature)
    {
        LoadCreatureDialog.Close(DialogResult.Ok(creature));
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        Console.WriteLine(e.File.Name);
    }

    async Task CreatureIdDebounce(string search)
    {
        if (int.TryParse(search, out int id))
        {
            var creature = await Service.GetCreatureByIdAsync(id, loaderProgressRef.SetLoading);
            if (creature == null)
            {
                Snackbar.Add($"Creature ID {search} not found.", Severity.Info);
            }
            else
            {
                Close(creature);
                return;
            }
        }
        else
        {
            Snackbar.Add($"Invalid input.", Severity.Info);
        }
        await creatureIdRef.FocusAsync();
    }

    async Task CreatureDisplayIdDebounce(string search)
    {
        if (int.TryParse(search, out int id))
        {
            var creature = await Service.GetCreatureByDisplayIdAsync(id, loaderProgressRef.SetLoading);
            if (creature == null)
            {
                Snackbar.Add($"Creature Display ID {search} not found.", Severity.Info);
            }
            else
            {
                Close(creature);
                return;
            }
        }
        else
        {
            Snackbar.Add($"Invalid input.", Severity.Info);
        }
        await creatureDisplayIdRef.FocusAsync();
    }
    async Task CharacterNameDebounce(string search)
    {
        if (string.IsNullOrWhiteSpace(search))
            return;

        var creature = await Service.GetCreatureByCharacterNameAsync(search, loaderProgressRef.SetLoading);
        if (creature == null)
        {
            Snackbar.Add($"Character {search} not found.", Severity.Info);
        }
        else
        {
            Close(creature);
            return;
        }
        await characterNameRef.FocusAsync();
    }

}