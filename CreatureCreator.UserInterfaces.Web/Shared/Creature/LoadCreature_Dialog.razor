@using CreatureCreator.Core.Enums;
@using CreatureCreator.Infrastructure.DtoModels
@using CreatureCreator.Infrastructure.Services

@inject CreatureCreatorService Service
@inject ISnackbar Snackbar

<MudOverlay Visible="isLoading" DarkBackground="false" Absolute="true" Class="Z-80">
    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Style="width: 400px;">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        <MudText Typo="Typo.h5" Color="Color.Primary">@loadingTitle</MudText>
        <MudText Typo="Typo.h6" Color="Color.Primary">@loadingSubTitle</MudText>
        <MudProgressLinear Color="Color.Info" Size="Size.Large" Value="loadingProgress" Class="my-7">
            <MudText Typo="Typo.subtitle1" Color="Color.Dark">
                <b>@($"{loadingProgress}%")</b>
            </MudText>
        </MudProgressLinear>
    </MudStack>
</MudOverlay>

<MudDialog>
    <DialogContent>
        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Style="width: 400px;" Class="@(isLoading ? "invisible" : "visible")">
            <MudTextField DebounceInterval="1000" OnDebounceIntervalElapsed="CharacterNameDebounce" @bind-Value="CharacterName" @ref="characterNameRef" Label="Character Name" Variant="Variant.Outlined" FullWidth="true" Disabled="isLoading" />
            <MudText Typo="Typo.h4">
                - or -
            </MudText>
            <MudNumericField DebounceInterval="1000" OnDebounceIntervalElapsed="CreatureIdDebounce" @bind-Value="CreatureId" @ref="creatureIdRef" Label="Creature ID" Variant="Variant.Outlined" FullWidth="true" HideSpinButtons="true" Disabled="isLoading" />
            <MudText Typo="Typo.h4">
                - or -
            </MudText>
            <MudNumericField DebounceInterval="1000" OnDebounceIntervalElapsed="CreatureDisplayIdDebounce" @bind-Value="CreatureDisplayId" @ref="creatureDisplayIdRef" Label="Creature Display ID" Variant="Variant.Outlined" FullWidth="true" HideSpinButtons="true" Disabled="isLoading" />
            <MudText Typo="Typo.h4">
                - or -
            </MudText>
            <MudText Typo="Typo.h6">
                Start from scratch
            </MudText>
            <MudStack Row="true" Style="height:200">
                <RaceSelector Gender="Genders.Male" RaceSelectedCallback="SelectNewMale" />
                <RaceSelector Gender="Genders.Female" RaceSelectedCallback="SelectNewFemale" />
            </MudStack>
            <MudSpacer />
        </MudStack>
    </DialogContent>
</MudDialog>


@code {
    [CascadingParameter]
    MudDialogInstance LoadCreatureDialog { get; set; }

    [Parameter]
    public int? CreatureId { get; set; }

    [Parameter]
    public int? CreatureDisplayId { get; set; }

    [Parameter]
    public string CharacterName { get; set; }

    MudTextField<string> characterNameRef;
    MudNumericField<int?> creatureIdRef;
    MudNumericField<int?> creatureDisplayIdRef;

    protected override async Task OnInitializedAsync()
    {
        if (CreatureId != null)
        {
            await CreatureIdDebounce(CreatureId.ToString());
        }
        else if (CreatureDisplayId != null)
        {
            await CreatureDisplayIdDebounce(CreatureDisplayId.ToString());
        }
        else if (CharacterName != null)
        {
            await CharacterNameDebounce(CharacterName);
        }
        await base.OnInitializedAsync();
    }

    private async Task SelectNewMale(DisplayRaces race)
    {
        await SelectionNew(race, Genders.Male);
    }

    private async Task SelectNewFemale(DisplayRaces race)
    {
        await SelectionNew(race, Genders.Female);
    }

    private async Task SelectionNew(DisplayRaces race, Genders gender)
    {
        var creature = await Service.GetCreatureByRaceAndGender(race, gender);
        Close(creature);
    }

    private void Close(CreatureDto creature)
    {
        LoadCreatureDialog.Close(DialogResult.Ok(creature));
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        Console.WriteLine(e.File.Name);
    }

    async Task CreatureIdDebounce(string search)
    {
        if (int.TryParse(search, out int id))
        {
            var creature = await Service.GetCreatureByIdAsync(id, SetLoading);
            if (creature == null)
            {
                Snackbar.Add($"Creature ID {search} not found.", Severity.Info);
            }
            else
            {
                Close(creature);
                return;
            }
        }
        else
        {
            Snackbar.Add($"Invalid input.", Severity.Info);
        }
        await creatureIdRef.FocusAsync();
    }

    async Task CreatureDisplayIdDebounce(string search)
    {
        if (int.TryParse(search, out int id))
        {
            var creature = await Service.GetCreatureByDisplayIdAsync(id, SetLoading);
            if (creature == null)
            {
                Snackbar.Add($"Creature Display ID {search} not found.", Severity.Info);
            }
            else
            {
                Close(creature);
                return;
            }
        }
        else
        {
            Snackbar.Add($"Invalid input.", Severity.Info);
        }
        await creatureDisplayIdRef.FocusAsync();
    }
    async Task CharacterNameDebounce(string search)
    {
        var creature = await Service.GetCreatureByCharacterNameAsync(search, SetLoading);
        if (creature == null)
        {
            Snackbar.Add($"Character {search} not found.", Severity.Info);
        }
        else
        {
            Close(creature);
            return;
        }
        await characterNameRef.FocusAsync();
    }


    #region Loading
    bool isLoading = false;
    string loadingTitle = "";
    string loadingSubTitle = "";
    int loadingProgress = 0;
    private void SetLoading(string progressTitle, string progressSubTitle, int progress)
    {
        isLoading = progress < 100;

        loadingProgress = progress;
        loadingTitle = progressTitle;
        loadingSubTitle = progressSubTitle;
        this.StateHasChanged();
    }
    #endregion
}