@page "/creature/{CreatureId:int?}"
@using CreatureCreator.Infrastructure.DtoModels
@using CreatureCreator.Infrastructure.Services

@inject IDialogService DialogService
@inject CreatureCreatorService Service
@inject IJSRuntime JSRuntime

@if (creature != null)
{

    <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mb-2">
        <MudStack Row="true">
            <MudButton Variant="@(itemLookup == null? Variant.Outlined : Variant.Filled)" Color="Color.Info">Item Lookup</MudButton>
            <MudButton Variant="@(creatureLookup == null? Variant.Outlined : Variant.Filled)" Color="Color.Info" OnClick="@CreatureLookup">Creature Lookup</MudButton>
        </MudStack>
        <MudStack Row="true">
            <MudButton Variant="Variant.Outlined" Color="Color.Success">ID: @creature.Id</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveAsync">Save</MudButton>
        </MudStack>
    </MudStack>
    <MudPaper>
        <MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" PanelClass="pa-6">
            <MudTabPanel Text="Template">
                <CreatureTemplate Creature="@creature" CreatureLookup="@creatureLookup" />
            </MudTabPanel>
            @if (creature.IsCustomizable)
            {
                <MudTabPanel Text="Customization">
                    <CreatureCustomization Creature="@creature" CreatureLookup="@creatureLookup" AvailableCustomizations="@availableCustomizations" />
                </MudTabPanel>
                <MudTabPanel Text="Equipment">
                    <CreatureEquipment Creature="@creature" CreatureLookup="@creatureLookup" />
                </MudTabPanel>
            }
        </MudTabs>
    </MudPaper>
}


@code {
    [Parameter]
    public int? CreatureId { get; set; }


    CreatureDto? creature;
    CreatureDto? creatureLookup;
    int? itemLookup;

    Dictionary<CustomizationOptionDto, List<CustomizationChoiceDto>> availableCustomizations;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var parameters = new DialogParameters();
            parameters.Add("CreatureId", CreatureId);
            var dialog = DialogService.Show<LoadCreature>("", parameters, new DialogOptions() { DisableBackdropClick = true });
            var result = await dialog.Result;
            creature = (CreatureDto)result.Data;

            availableCustomizations = await Service.GetAvailableCustomizations(creature.Race, creature.Gender);
            this.StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task SaveAsync()
    {
        if (creature != null)
        {
            await Service.SaveCreatureAsync(creature);
        }
    }

    async Task CreatureLookup()
    {
        var dialog = DialogService.Show<LoadCreature>("", new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true });
        var result = await dialog.Result;
        if (result.Data != null)
            creatureLookup = (CreatureDto)result.Data;
    }
}
